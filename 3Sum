Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

Solution:

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        if len(nums)<3:
            return
        ans=[]
        s={}
        nums.sort()
        for i in range(len(nums)-2):
            x=nums[i]
            l=i+1
            r=len(nums)-1
            # s.clear()
            while l<r and nums[i]!=nums[i-1]:
                if x+nums[l]+nums[r]==0:
                    ans.append([nums[i],nums[l],nums[r]])
                    # if nums[l] not in s:
                        
                        # s.add(nums[l])
                    l=l+1
                    r=r-1
                elif x+nums[l]+nums[r]<0:
                    l=l+1
                elif x+nums[l]+nums[r]>0:
                    r=r-1
        return ans
