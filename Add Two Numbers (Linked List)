2. Add Two Numbers
Medium

9041

2278

Add to List

Share
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Solution:

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        isLZ = False
        ans = l1

        if l1 and not l2: return l1
        if not l1 and l2: return l2

        while l1 and l2:
            l1.val += l2.val

            if isLZ: 
                l1.val += 1
                isLZ = False

            if l1.val >= 10: 
                isLZ = True
                l1.val %= 10

            if not l1.next and not l2.next:
                if isLZ:
                    node = ListNode(1)
                    l1.next = node
                    isLZ = False

            if l1.next and not l2.next:
                if isLZ: 
                    node = ListNode(1)
                    l2.next = node
                    isLZ = False

            if not l1.next and l2.next:
                if isLZ:
                    node = ListNode(1)
                    l1.next = node
                    isLZ = False
                else:
                    l1.next = l2.next
                    break

            l1 = l1.next
            l2 = l2.next

        return ans
